// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chats.sql

package database

import (
	"context"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, command, step, data) 
VALUES (?, ?, ?, ?) 
RETURNING id, command, step, data, reply_markup_1, reply_markup_2, reply_markup_3, reply_markup_4
`

type CreateChatParams struct {
	ID      int64
	Command string
	Step    int64
	Data    []byte
}

func (q *Queries) CreateChat(ctx context.Context, arg *CreateChatParams) (*Chat, error) {
	row := q.queryRow(ctx, q.createChatStmt, createChat,
		arg.ID,
		arg.Command,
		arg.Step,
		arg.Data,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Step,
		&i.Data,
		&i.ReplyMarkup1,
		&i.ReplyMarkup2,
		&i.ReplyMarkup3,
		&i.ReplyMarkup4,
	)
	return &i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM chats WHERE id = ?
`

func (q *Queries) DeleteChat(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteChatStmt, deleteChat, id)
	return err
}

const getChat = `-- name: GetChat :one
SELECT id, command, step, data, reply_markup_1, reply_markup_2, reply_markup_3, reply_markup_4 FROM chats WHERE id = ? LIMIT 1
`

func (q *Queries) GetChat(ctx context.Context, id int64) (*Chat, error) {
	row := q.queryRow(ctx, q.getChatStmt, getChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Step,
		&i.Data,
		&i.ReplyMarkup1,
		&i.ReplyMarkup2,
		&i.ReplyMarkup3,
		&i.ReplyMarkup4,
	)
	return &i, err
}

const isChatExists = `-- name: IsChatExists :one
SELECT EXISTS(SELECT 1 FROM chats WHERE id = ? LIMIT 1)
`

func (q *Queries) IsChatExists(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.isChatExistsStmt, isChatExists, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const updateChat = `-- name: UpdateChat :one
UPDATE chats
SET 
  command = ?, 
  step = ?, 
  data = ?
WHERE id = ?
RETURNING id, command, step, data, reply_markup_1, reply_markup_2, reply_markup_3, reply_markup_4
`

type UpdateChatParams struct {
	Command string
	Step    int64
	Data    []byte
	ID      int64
}

func (q *Queries) UpdateChat(ctx context.Context, arg *UpdateChatParams) (*Chat, error) {
	row := q.queryRow(ctx, q.updateChatStmt, updateChat,
		arg.Command,
		arg.Step,
		arg.Data,
		arg.ID,
	)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Command,
		&i.Step,
		&i.Data,
		&i.ReplyMarkup1,
		&i.ReplyMarkup2,
		&i.ReplyMarkup3,
		&i.ReplyMarkup4,
	)
	return &i, err
}

const updateReplyMarkup1 = `-- name: UpdateReplyMarkup1 :exec
UPDATE chats
SET 
  reply_markup_1 = ?
WHERE id = ?
`

type UpdateReplyMarkup1Params struct {
	ReplyMarkup1 []byte
	ID           int64
}

func (q *Queries) UpdateReplyMarkup1(ctx context.Context, arg *UpdateReplyMarkup1Params) error {
	_, err := q.exec(ctx, q.updateReplyMarkup1Stmt, updateReplyMarkup1, arg.ReplyMarkup1, arg.ID)
	return err
}

const updateReplyMarkup2 = `-- name: UpdateReplyMarkup2 :exec
UPDATE chats
SET 
  reply_markup_2 = ?
WHERE id = ?
`

type UpdateReplyMarkup2Params struct {
	ReplyMarkup2 []byte
	ID           int64
}

func (q *Queries) UpdateReplyMarkup2(ctx context.Context, arg *UpdateReplyMarkup2Params) error {
	_, err := q.exec(ctx, q.updateReplyMarkup2Stmt, updateReplyMarkup2, arg.ReplyMarkup2, arg.ID)
	return err
}

const updateReplyMarkup3 = `-- name: UpdateReplyMarkup3 :exec
UPDATE chats
SET 
  reply_markup_3 = ?
WHERE id = ?
`

type UpdateReplyMarkup3Params struct {
	ReplyMarkup3 []byte
	ID           int64
}

func (q *Queries) UpdateReplyMarkup3(ctx context.Context, arg *UpdateReplyMarkup3Params) error {
	_, err := q.exec(ctx, q.updateReplyMarkup3Stmt, updateReplyMarkup3, arg.ReplyMarkup3, arg.ID)
	return err
}

const updateReplyMarkup4 = `-- name: UpdateReplyMarkup4 :exec
UPDATE chats
SET 
  reply_markup_4 = ?
WHERE id = ?
`

type UpdateReplyMarkup4Params struct {
	ReplyMarkup4 []byte
	ID           int64
}

func (q *Queries) UpdateReplyMarkup4(ctx context.Context, arg *UpdateReplyMarkup4Params) error {
	_, err := q.exec(ctx, q.updateReplyMarkup4Stmt, updateReplyMarkup4, arg.ReplyMarkup4, arg.ID)
	return err
}
