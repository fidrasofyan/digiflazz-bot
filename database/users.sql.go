// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, first_name, last_name, created_at) 
VALUES (?, ?, ?, ?, ?) 
RETURNING id, username, first_name, last_name, created_at
`

type CreateUserParams struct {
	ID        int64
	Username  *string
	FirstName *string
	LastName  *string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, first_name, last_name, created_at FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return &i, err
}

const isUserExists = `-- name: IsUserExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = ? LIMIT 1)
`

func (q *Queries) IsUserExists(ctx context.Context, id int64) (int64, error) {
	row := q.queryRow(ctx, q.isUserExistsStmt, isUserExists, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
