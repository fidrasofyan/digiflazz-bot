// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createChatStmt, err = db.PrepareContext(ctx, createChat); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChat: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteAllPrepaidProductsStmt, err = db.PrepareContext(ctx, deleteAllPrepaidProducts); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllPrepaidProducts: %w", err)
	}
	if q.deleteChatStmt, err = db.PrepareContext(ctx, deleteChat); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChat: %w", err)
	}
	if q.getBrandsByCategoryStmt, err = db.PrepareContext(ctx, getBrandsByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetBrandsByCategory: %w", err)
	}
	if q.getCategoriesStmt, err = db.PrepareContext(ctx, getCategories); err != nil {
		return nil, fmt.Errorf("error preparing query GetCategories: %w", err)
	}
	if q.getChatStmt, err = db.PrepareContext(ctx, getChat); err != nil {
		return nil, fmt.Errorf("error preparing query GetChat: %w", err)
	}
	if q.getPrepaidProductBySKUCodeStmt, err = db.PrepareContext(ctx, getPrepaidProductBySKUCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetPrepaidProductBySKUCode: %w", err)
	}
	if q.getPrepaidProductsStmt, err = db.PrepareContext(ctx, getPrepaidProducts); err != nil {
		return nil, fmt.Errorf("error preparing query GetPrepaidProducts: %w", err)
	}
	if q.getTypesByCategoryAndBrandStmt, err = db.PrepareContext(ctx, getTypesByCategoryAndBrand); err != nil {
		return nil, fmt.Errorf("error preparing query GetTypesByCategoryAndBrand: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.insertPrepaidProductStmt, err = db.PrepareContext(ctx, insertPrepaidProduct); err != nil {
		return nil, fmt.Errorf("error preparing query InsertPrepaidProduct: %w", err)
	}
	if q.isChatExistsStmt, err = db.PrepareContext(ctx, isChatExists); err != nil {
		return nil, fmt.Errorf("error preparing query IsChatExists: %w", err)
	}
	if q.isUserExistsStmt, err = db.PrepareContext(ctx, isUserExists); err != nil {
		return nil, fmt.Errorf("error preparing query IsUserExists: %w", err)
	}
	if q.updateChatStmt, err = db.PrepareContext(ctx, updateChat); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChat: %w", err)
	}
	if q.updateReplyMarkup1Stmt, err = db.PrepareContext(ctx, updateReplyMarkup1); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReplyMarkup1: %w", err)
	}
	if q.updateReplyMarkup2Stmt, err = db.PrepareContext(ctx, updateReplyMarkup2); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReplyMarkup2: %w", err)
	}
	if q.updateReplyMarkup3Stmt, err = db.PrepareContext(ctx, updateReplyMarkup3); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReplyMarkup3: %w", err)
	}
	if q.updateReplyMarkup4Stmt, err = db.PrepareContext(ctx, updateReplyMarkup4); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateReplyMarkup4: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createChatStmt != nil {
		if cerr := q.createChatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChatStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteAllPrepaidProductsStmt != nil {
		if cerr := q.deleteAllPrepaidProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllPrepaidProductsStmt: %w", cerr)
		}
	}
	if q.deleteChatStmt != nil {
		if cerr := q.deleteChatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChatStmt: %w", cerr)
		}
	}
	if q.getBrandsByCategoryStmt != nil {
		if cerr := q.getBrandsByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBrandsByCategoryStmt: %w", cerr)
		}
	}
	if q.getCategoriesStmt != nil {
		if cerr := q.getCategoriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCategoriesStmt: %w", cerr)
		}
	}
	if q.getChatStmt != nil {
		if cerr := q.getChatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatStmt: %w", cerr)
		}
	}
	if q.getPrepaidProductBySKUCodeStmt != nil {
		if cerr := q.getPrepaidProductBySKUCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPrepaidProductBySKUCodeStmt: %w", cerr)
		}
	}
	if q.getPrepaidProductsStmt != nil {
		if cerr := q.getPrepaidProductsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPrepaidProductsStmt: %w", cerr)
		}
	}
	if q.getTypesByCategoryAndBrandStmt != nil {
		if cerr := q.getTypesByCategoryAndBrandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTypesByCategoryAndBrandStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.insertPrepaidProductStmt != nil {
		if cerr := q.insertPrepaidProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertPrepaidProductStmt: %w", cerr)
		}
	}
	if q.isChatExistsStmt != nil {
		if cerr := q.isChatExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isChatExistsStmt: %w", cerr)
		}
	}
	if q.isUserExistsStmt != nil {
		if cerr := q.isUserExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isUserExistsStmt: %w", cerr)
		}
	}
	if q.updateChatStmt != nil {
		if cerr := q.updateChatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChatStmt: %w", cerr)
		}
	}
	if q.updateReplyMarkup1Stmt != nil {
		if cerr := q.updateReplyMarkup1Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReplyMarkup1Stmt: %w", cerr)
		}
	}
	if q.updateReplyMarkup2Stmt != nil {
		if cerr := q.updateReplyMarkup2Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReplyMarkup2Stmt: %w", cerr)
		}
	}
	if q.updateReplyMarkup3Stmt != nil {
		if cerr := q.updateReplyMarkup3Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReplyMarkup3Stmt: %w", cerr)
		}
	}
	if q.updateReplyMarkup4Stmt != nil {
		if cerr := q.updateReplyMarkup4Stmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateReplyMarkup4Stmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	createChatStmt                 *sql.Stmt
	createUserStmt                 *sql.Stmt
	deleteAllPrepaidProductsStmt   *sql.Stmt
	deleteChatStmt                 *sql.Stmt
	getBrandsByCategoryStmt        *sql.Stmt
	getCategoriesStmt              *sql.Stmt
	getChatStmt                    *sql.Stmt
	getPrepaidProductBySKUCodeStmt *sql.Stmt
	getPrepaidProductsStmt         *sql.Stmt
	getTypesByCategoryAndBrandStmt *sql.Stmt
	getUserStmt                    *sql.Stmt
	insertPrepaidProductStmt       *sql.Stmt
	isChatExistsStmt               *sql.Stmt
	isUserExistsStmt               *sql.Stmt
	updateChatStmt                 *sql.Stmt
	updateReplyMarkup1Stmt         *sql.Stmt
	updateReplyMarkup2Stmt         *sql.Stmt
	updateReplyMarkup3Stmt         *sql.Stmt
	updateReplyMarkup4Stmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		createChatStmt:                 q.createChatStmt,
		createUserStmt:                 q.createUserStmt,
		deleteAllPrepaidProductsStmt:   q.deleteAllPrepaidProductsStmt,
		deleteChatStmt:                 q.deleteChatStmt,
		getBrandsByCategoryStmt:        q.getBrandsByCategoryStmt,
		getCategoriesStmt:              q.getCategoriesStmt,
		getChatStmt:                    q.getChatStmt,
		getPrepaidProductBySKUCodeStmt: q.getPrepaidProductBySKUCodeStmt,
		getPrepaidProductsStmt:         q.getPrepaidProductsStmt,
		getTypesByCategoryAndBrandStmt: q.getTypesByCategoryAndBrandStmt,
		getUserStmt:                    q.getUserStmt,
		insertPrepaidProductStmt:       q.insertPrepaidProductStmt,
		isChatExistsStmt:               q.isChatExistsStmt,
		isUserExistsStmt:               q.isUserExistsStmt,
		updateChatStmt:                 q.updateChatStmt,
		updateReplyMarkup1Stmt:         q.updateReplyMarkup1Stmt,
		updateReplyMarkup2Stmt:         q.updateReplyMarkup2Stmt,
		updateReplyMarkup3Stmt:         q.updateReplyMarkup3Stmt,
		updateReplyMarkup4Stmt:         q.updateReplyMarkup4Stmt,
	}
}
